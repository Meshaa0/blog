<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Tech Mesha</title>
    <link>http://localhost:1313/post/</link>
    <description>Recent content in Posts on Tech Mesha</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright © 2008–2019, Steve Francia and the lee.so; all rights reserved.</copyright>
    <lastBuildDate>Thu, 04 Apr 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Build AI apps with PartyRock</title>
      <link>http://localhost:1313/post/project1/</link>
      <pubDate>Mon, 04 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/project1/</guid>
      <description>Joining the excitement around Generative AI, AWS has introduced PartyRock, a fun tool in the Amazon Bedrock Playground. PartyRock is a no-code platform that lets anyone easily create Generative AI apps without hassle.&#xA;You can access PartyRock through any web browser, and it doesn&amp;rsquo;t require an AWS account. Once you make your app, you can share it by generating a link and post it on social media using #partyrockplayground.</description>
    </item>
    <item>
      <title>Game Deployment: CI/CD Pipeline from GitHub to AWS S3</title>
      <link>http://localhost:1313/post/project3/</link>
      <pubDate>Thu, 04 Apr 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/project3/</guid>
      <description>CI/CD stands for Continuous Integration and Continuous Deployment is a simplified process that automates the different stages, such as building, testing and deploying, of developing software. As software is developed using CI/CD, developers guarantee that it is continuously left in a deployable condition. Changes in the code are integrated safely and as soon as feasible in this case in a practical setting. This development methodology shortens the development cycle while increasing the quality of the program in question by allowing for quick and often deployment.</description>
    </item>
    <item>
      <title>Create AWS VPC with Subnets using Terraform - Infra As Code</title>
      <link>http://localhost:1313/post/project2/</link>
      <pubDate>Wed, 20 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/project2/</guid>
      <description>In this article, I&amp;rsquo;ll walk you through the simple steps of creating an AWS Virtual Private Cloud (VPC) with both public and private subnets using Terraform, while ensuring we follow the best practices.&#xA;AWS VPC Component Below is a list of components we are going to create:&#xA;One VPC One private subnets One public subnets One internet gateway for public internet traffic One route table One route table association Let’s Start!</description>
    </item>
  </channel>
</rss>
